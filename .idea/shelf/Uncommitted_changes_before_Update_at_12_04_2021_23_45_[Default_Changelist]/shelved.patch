Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision b951d3871d0a3a3a794782d20de2bef6decfccf3)
+++ .idea/gradle.xml	(date 1615379285863)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/example/musfeat/view/signIn/SignInFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.musfeat.view.signIn\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.graphics.PorterDuff\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport android.widget.EditText\r\nimport androidx.core.content.res.ResourcesCompat\r\nimport androidx.core.graphics.drawable.DrawableCompat\r\nimport com.example.musfeat.R\r\nimport com.example.musfeat.architecture.BaseFragment\r\nimport com.example.musfeat.presentation.SignInPresenter\r\nimport com.example.musfeat.view.signUp.SignUpFragment\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.android.synthetic.main.activity_wrapper.*\r\nimport kotlinx.android.synthetic.main.fragment_sign_in.*\r\nimport moxy.ktx.moxyPresenter\r\nimport javax.inject.Inject\r\n\r\n@AndroidEntryPoint\r\nclass SignInFragment : BaseFragment(R.layout.fragment_sign_in), SignInView {\r\n\r\n    @Inject\r\n    lateinit var loginPresenter: SignInPresenter\r\n\r\n    private val presenter: SignInPresenter by moxyPresenter { loginPresenter }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setListeners()\r\n        activity?.toolbar?.title = getString(R.string.login_title)\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private fun setListeners() {\r\n\r\n        etEmail.setCompoundDrawablesRelativeWithIntrinsicBounds(R.drawable.ic_email_24, 0, 0, 0)\r\n        etPassword.setCompoundDrawablesRelativeWithIntrinsicBounds(R.drawable.ic_lock_24, 0, 0, 0)\r\n\r\n        etEmail.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {}\r\n\r\n            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {}\r\n\r\n            override fun afterTextChanged(p0: Editable?) {\r\n                val resources = context!!.resources\r\n                val theme = context!!.theme\r\n                if (p0?.length != 0 && presenter.isEmailValid(p0.toString())) {\r\n                    var drawable =\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_email_24, theme)\r\n                    drawable = DrawableCompat.wrap(drawable!!)\r\n                    DrawableCompat.setTint(\r\n                        drawable,\r\n                        ResourcesCompat.getColor(resources, R.color.colorDarkBlue, theme)\r\n                    )\r\n                    DrawableCompat.setTintMode(drawable, PorterDuff.Mode.SRC_IN)\r\n                    etEmail.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null)\r\n                    etEmail.setCompoundDrawablesWithIntrinsicBounds(\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_email_24, theme),\r\n                        null,\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_cancel_24, theme),\r\n                        null\r\n                    )\r\n                } else if (p0 != null && p0.isEmpty()) {\r\n                    etEmail.setCompoundDrawablesRelativeWithIntrinsicBounds(\r\n                        R.drawable.ic_email_24, 0, 0, 0\r\n                    )\r\n                    var drawable =\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_email_24, theme)\r\n                    drawable = DrawableCompat.wrap(drawable!!)\r\n                    DrawableCompat.setTint(\r\n                        drawable!!,\r\n                        ResourcesCompat.getColor(resources, R.color.colorDefault, theme)\r\n                    )\r\n                    DrawableCompat.setTintMode(drawable, PorterDuff.Mode.SRC_IN)\r\n                    etEmail.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null)\r\n                    etEmail.setCompoundDrawablesWithIntrinsicBounds(\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_email_24, theme),\r\n                        null, null, null\r\n                    )\r\n                }\r\n            }\r\n        })\r\n\r\n        etPassword.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {}\r\n\r\n            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {}\r\n\r\n            override fun afterTextChanged(p0: Editable?) {\r\n                val resources = context!!.resources\r\n                val theme = context!!.theme\r\n                if (p0?.toString()?.length!! >= 4) {\r\n                    var drawable =\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_lock_24, theme)\r\n                    drawable = DrawableCompat.wrap(drawable!!)\r\n                    DrawableCompat.setTint(\r\n                        drawable!!,\r\n                        ResourcesCompat.getColor(resources, R.color.colorDarkBlue, theme)\r\n                    )\r\n                    DrawableCompat.setTintMode(drawable!!, PorterDuff.Mode.SRC_IN)\r\n                    etPassword.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null)\r\n                    etPassword.setCompoundDrawablesWithIntrinsicBounds(\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_lock_24, theme),\r\n                        null,\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_cancel_24, theme),\r\n                        null\r\n                    )\r\n                } else if (p0.isEmpty()) {\r\n                    etPassword.setCompoundDrawablesRelativeWithIntrinsicBounds(\r\n                        R.drawable.ic_lock_24,\r\n                        0, 0, 0\r\n                    )\r\n                    var drawable =\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_lock_24, theme)\r\n                    drawable = DrawableCompat.wrap(drawable!!)\r\n                    DrawableCompat.setTint(\r\n                        drawable!!,\r\n                        ResourcesCompat.getColor(resources, R.color.colorDefault, theme)\r\n                    )\r\n                    DrawableCompat.setTintMode(drawable!!, PorterDuff.Mode.SRC_IN)\r\n                    etPassword.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null)\r\n                    etPassword.setCompoundDrawablesWithIntrinsicBounds(\r\n                        ResourcesCompat.getDrawable(resources, R.drawable.ic_lock_24, theme),\r\n                        null, null, null\r\n                    )\r\n                }\r\n            }\r\n        })\r\n\r\n        etEmail.setOnTouchListener { _, event ->\r\n\r\n            if (event.action == MotionEvent.ACTION_DOWN && etEmail.compoundDrawables[2] != null &&\r\n                event.x >= etEmail.right - etEmail.left - etEmail.compoundDrawables[2].bounds.width() &&\r\n                etEmail.text.isNotEmpty()\r\n            )\r\n                etEmail.setText(\"\")\r\n            false\r\n        }\r\n\r\n        etPassword.setOnTouchListener { _, event ->\r\n\r\n            if (event.action == MotionEvent.ACTION_DOWN &&\r\n                etPassword.compoundDrawables[2] != null &&\r\n                event.x >= etPassword.right - etPassword.left - etPassword.compoundDrawables[2].bounds.width() &&\r\n                etPassword.text.isNotEmpty()\r\n            )\r\n                etPassword.setText(\"\")\r\n            false\r\n        }\r\n\r\n        btnLogin.setBackgroundResource(R.color.colorWhiteBlueShade)\r\n\r\n        val loginTextWatcher: TextWatcher = object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {}\r\n\r\n            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {}\r\n\r\n            override fun afterTextChanged(s: Editable) {\r\n                val mEmail: String = etEmail.text.toString().trim()\r\n                val mPassword: String = etPassword.text.toString().trim()\r\n                if (presenter.isEmailValid(mEmail) && mPassword.length >= 4) {\r\n                    btnLogin.setBackgroundResource(R.color.colorDarkBlue)\r\n                    btnLogin.isEnabled = true\r\n                } else {\r\n                    btnLogin.setBackgroundResource(R.color.colorWhiteBlueShade)\r\n                    btnLogin.isEnabled = false\r\n                }\r\n            }\r\n        }\r\n\r\n        etEmail.addTextChangedListener(loginTextWatcher)\r\n        etPassword.addTextChangedListener(loginTextWatcher)\r\n\r\n        onTouchListener(etEmail)\r\n        onTouchListener(etPassword)\r\n\r\n        btnRegistration.setOnClickListener {\r\n            presenter.onBtnRegistrationClicked()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private fun onTouchListener(editTextId: EditText) {\r\n        editTextId.setOnTouchListener { _, event ->\r\n\r\n            if (event.action == MotionEvent.ACTION_DOWN &&\r\n                editTextId.compoundDrawables[2] != null &&\r\n                event.x >= editTextId.right - editTextId.left - editTextId.compoundDrawables[2].bounds.width() &&\r\n                editTextId.text.isNotEmpty()\r\n            )\r\n                editTextId.setText(\"\")\r\n            false\r\n        }\r\n    }\r\n\r\n    override fun toSignUpFragment() {\r\n        parentFragmentManager.beginTransaction()\r\n            .replace(R.id.container, SignUpFragment())\r\n            .commit()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/musfeat/view/signIn/SignInFragment.kt	(revision b951d3871d0a3a3a794782d20de2bef6decfccf3)
+++ app/src/main/java/com/example/musfeat/view/signIn/SignInFragment.kt	(date 1615384591912)
@@ -64,7 +64,7 @@
                         ResourcesCompat.getDrawable(resources, R.drawable.ic_cancel_24, theme),
                         null
                     )
-                } else if (p0 != null && p0.isEmpty()) {
+                } else{
                     etEmail.setCompoundDrawablesRelativeWithIntrinsicBounds(
                         R.drawable.ic_email_24, 0, 0, 0
                     )
@@ -84,7 +84,6 @@
                 }
             }
         })
-
         etPassword.addTextChangedListener(object : TextWatcher {
             override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {}
 
